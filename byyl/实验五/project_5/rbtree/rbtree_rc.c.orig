#include "rbtree_rc.h"
#include <stddef.h>

/*
 * Initializing rbtree root
 */
void init_rbtree(struct rb_root *root)
{
	*root = RB_ROOT;
}

/*
 * Search key node from rbtree
 */
struct container *container_search(const struct rb_root *root, const void *key, int (*cmp)(const void *x, const void *y))
{
	struct rb_node *node = root->rb_node;
	
	while (node) 
	{
		struct container *self = rb_entry(node, struct container, rb_node);
		
		int result = cmp(key, self->data);
		
		if (result < 0)
			node = node->rb_left;
		else if (result > 0)
			node = node->rb_right;
		else
            return self;
	}
	return 0;
}

/*
 * Insert key node into rbtree
 */
int container_insert(struct rb_root *root, struct container *cont, int (*cmp)(const void *x, const void *y))
{
    struct rb_node **new_ = &(root->rb_node);
	struct rb_node  *parent = 0;
		
	/* Figure out where to put new node */
    while (*new_)
	{
        struct container *self = rb_entry(*new_, struct container, rb_node);
		
		int result = cmp(cont->data, self->data);
		
        parent = *new_;
		
		if (result < 0)
            new_ = &((*new_)->rb_left);
		else if (result > 0)
            new_ = &((*new_)->rb_right);
		else
			return -1; // the key is already exists
	}

	/* Add new node and rebalance tree. */
    rb_link_node(&(cont->rb_node), parent, new_);
	rb_insert_color(&(cont->rb_node), root);

	return 0;
}

/*
 * Delete the key node from rbtree
 *     delete node from rbtree, return node pointer
 */
struct container *container_delete(struct rb_root *root, const void *key, int (*cmp)(const void *x, const void *y))
{
	struct container *find = container_search(root, key, cmp);
	if (!find)
		return 0;
	rb_erase(&find->rb_node, root);
	return find;
}

/*
 * Replace the key node from rbtree for new container
 *    replace node from rbtree, return old node pointer
 */
struct container * container_replace(struct rb_root *root, const void *key, struct container *cont, int (*cmp)(const void *x, const void *y))
{
	struct container *find = container_search(root, key, cmp);
	if (!find)
		return 0;
	rb_replace_node(&(find->rb_node), &cont->rb_node, root);
	return find;
}


void container_traverse(const struct rb_root *root, void (*func)(const struct container *))
{
    struct rb_node *node;
    for (node = rb_first(root); node; node = rb_next(node))
      func(rb_entry(node, struct container, rb_node));
}

int rb_cmp(const struct rb_root *root1, const struct rb_root *root2, int (*cmp)(const void *, const void *))
{
    struct rb_node *node1, *node2;
    int result;
    for (node1 = rb_first(root1), node2 = rb_first(root2); node1 && node2; node1 = rb_next(node1), node2 = rb_next(node2)) {
        result = cmp(rb_entry(node1, struct container, rb_node)->data, rb_entry(node2, struct container, rb_node)->data);
        if (result != 0)
            return result;
    }
    if (node1 != NULL && node2 == NULL)
        return 1;
    if (node2 != NULL && node1 == NULL)
        return -1;
    return 0;
}
